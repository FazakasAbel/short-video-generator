import json
from openai import OpenAI

class YouTubeScriptGenerator:
    def __init__(self, api_key):
        self.client = OpenAI(api_key=api_key)
        
    def get_script(self, theme):
        instruction = """
        You are an assistant for a YouTube creator.
        """
        
        prompt = f"""
        Generate a script for a ~30-second YouTube Short video about the online game {theme}. The script should include an introduction, some general knowledge, fun facts, and a conclusion.

        The script should be written in JSON format with each object containing a "text" field for the speech and an "image" field, which is an object with "description" and "duration" keys.
        Each "text" entry should correspond to one image, ensuring that the duration matches the length of the sentence.
        Include descriptions of static images generated by DALL-E.
        The final JSON should be an array of objects, with each object containing "text" and "image" keys.
        Each "image" key should hold an object with two keys: "description" and "duration". The duration should be a single value.
        Ensure the script is at least 5 sentences long, with one sentence per text entry.
        Pay special attention to avoid long sentences to ensure each sentence fits within its corresponding image's duration.
        Make the durations less than 7 seconds and use shorter, engaging sentences.

        Example:
        ```json
        [
          {{
            "text": "Welcome, tank commanders, to the fierce battlegrounds of World of Tanks! Get ready to immerse yourself in the thrill of armored warfare, where strategy and firepower reign supreme.",
            "image": {{
              "description": "A stunning depiction of tanks rolling across a vast battlefield, smoke billowing from their barrels as they engage in intense combat",
              "duration": 6
            }}
          }},
          {{
            "text": "Did you know? World of Tanks boasts an expansive community of over 160 million players worldwide! Join forces with tank enthusiasts from around the globe and dominate the battlefield.",
            "image": {{
              "description": "An impressive visualization of the global reach of World of Tanks, with tanks converging from different corners of the world onto a central battlefield",
              "duration": 7
            }}
          }},
          {{
            "text": "But it's not just about numbers; it's about the sheer diversity of tanks at your disposal. With over 550 meticulously crafted tanks spanning various eras and nations, there's a ride for every commander's taste.",
            "image": {{
              "description": "A captivating collage showcasing the wide array of tanks available in World of Tanks, from iconic classics to cutting-edge modern war machines",
              "duration": 8
            }}
          }},
          {{
            "text": "And as you embark on your journey, remember, victory isn't just about firepower; it's about cunning tactics and unwavering teamwork. Coordinate with your allies and outmaneuver your foes to claim victory on the battlefield.",
            "image": {{
              "description": "A dramatic scene portraying tanks working in unison, executing a well-coordinated attack against their adversaries while maintaining formation",
              "duration": 9
            }}
          }}
        ]
        ```
        """
        
        completion = self.client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": instruction},
                {"role": "user", "content": prompt}
            ]
        )
        
        try:
            content = completion.choices[0].message.content
            # Extract JSON content from the message content
            start_index = content.find("```json\n") + len("```json\n")
            end_index = content.rfind("\n```")
            json_content = content[start_index:end_index].strip()
            return json.loads(json_content)
        except (IndexError, json.JSONDecodeError, AttributeError) as e:
            print(f"Error occurred: {e}")
            return None
