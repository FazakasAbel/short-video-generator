import json
from openai import OpenAI
from settings import OPENAI_API_KEY
from src.model.scene import Scene
import logging as log

class YouTubeScriptGenerator:
    def __init__(self):
        self.client = OpenAI(api_key=OPENAI_API_KEY)
        
    def get_script(self, theme):
        instruction = """
        You are an assistant for a YouTube creator.
        Include multiple images along with longer sentences in your script.
        """
        
        prompt = (
            f"Generate a script for a ~30-second YouTube Short video about {theme}. "
            "The script should include an introduction, some general knowledge, fun facts, and a conclusion. "
            "Each 'text' entry should correspond to a list of images with the key 'images', ensuring that the duration matches the length of the sentence. "
            "Include descriptions of static images generated by DALL-E. "
            "The final JSON should be an array of objects, with each object containing 'text' and 'images' keys. "
            "Under the 'images' key, include an array of objects with 'description' and 'duration' keys. "
            "The duration should be a single value. "
            "Ensure the script is at least 5 sentences long, with one sentence per text entry. "
            "Make the durations less than 7 seconds and use engaging sentences. "
            "Here's an example:```json "
            '[{"text": "some engaging introduction.", '
            '"images": [{"description": "image description", "duration": 4}, '
            '{"description": "next images description", "duration": 3}]}, '
            '{"text": "some fun fact, intresting concept", '
            '"images": [{"description": "image description", "duration": 4}]}, '
            '{"text": "other engaging information", '
            '"images": [{"description": "other image description", "duration": 4}, '
            '{"description": "more image description", "duration": 3}]}] ```'
        )

        
        completion = self.client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": instruction},
                {"role": "user", "content": prompt}
            ]
        )
        
        try:
            content = completion.choices[0].message.content
            # Extract JSON content from the message content
            start_index = content.find("```json\n") + len("```json\n")
            end_index = content.rfind("\n```")
            log.exception(content)
            json_content = json.loads(content[start_index:end_index].strip())
            return [Scene.from_json(scene) for scene in json_content]
        except (IndexError, json.JSONDecodeError, AttributeError) as e:
            log.error(f"Error occurred: {e}")
            return None

